import math
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist, Point
from nav_msgs.msg import Path
from sensor_msgs.msg import LaserScan
import time

class Controller(Node):
    def __init__(self):
        super().__init__('controller')
        self.pub = self.create_publisher(Twist, '/cmd_vel', 10)
        self.scan_sub = self.create_subscription(LaserScan, '/scan', self.scan_callback, 1)
        self.a_star_global_path_sub = self.create_subscription(Path, '/a_star_global_path', self.global_path_callback, 1)
        self.cmd_msg = Twist()

        # 현재 위치 및 방향
        self.pose_x = 0.0
        self.pose_y = 0.0
        self.heading = 0.0  # LaserScan에서 계산

        # 이동 타이머 설정
        self.timer = self.create_timer(0.1, self.move_to_destination)

        self.is_to_move = True

        # a_star를 통해 생성한 global_path
        self.global_path = [(-50.002, -50.098), (-49.972, -50.068), (-49.942, -50.038), (-49.912, -50.007999999999996), (-49.882000000000005, -49.977999999999994), (-49.852000000000004, -49.948), (-49.822, -49.918), (-49.792, -49.888), (-49.762, -49.858), (-49.732, -49.827999999999996), (-49.702000000000005, -49.797999999999995), (-49.672000000000004, -49.768), (-49.642, -49.738), (-49.612, -49.708), (-49.582, -49.678), (-49.552, -49.647999999999996), (-49.522000000000006, -49.617999999999995), (-49.492000000000004, -49.588), (-49.462, -49.558), (-49.432, -49.528), (-49.402, -49.498), (-49.372, -49.498), (-49.342000000000006, -49.498), (-49.312000000000005, -49.498), (-49.282000000000004, -49.498), (-49.252, -49.498), (-49.222, -49.498), (-49.192, -49.498), (-49.162, -49.467999999999996), (-49.162, -49.437999999999995), (-49.162, -49.408), (-49.162, -49.378), (-49.162, -49.348), (-49.162, -49.318), (-49.162, -49.288), (-49.162, -49.257999999999996), (-49.162, -49.227999999999994), (-49.162, -49.198), (-49.162, -49.168), (-49.162, -49.138), (-49.162, -49.108), (-49.162, -49.077999999999996), (-49.162, -49.047999999999995), (-49.162, -49.018), (-49.162, -48.988), (-49.162, -48.958), (-49.162, -48.928), (-49.162, -48.897999999999996), (-49.162, -48.867999999999995), (-49.162, -48.838), (-49.162, -48.808), (-49.162, -48.778), (-49.162, -48.748), (-49.162, -48.717999999999996), (-49.162, -48.687999999999995), (-49.162, -48.658), (-49.162, -48.628), (-49.162, -48.598), (-49.162, -48.568), (-49.162, -48.538), (-49.162, -48.507999999999996), (-49.162, -48.477999999999994), (-49.162, -48.448), (-49.162, -48.418), (-49.162, -48.388), (-49.162, -48.358), (-49.162, -48.327999999999996), (-49.162, -48.297999999999995), (-49.162, -48.268), (-49.162, -48.238), (-49.162, -48.208), (-49.162, -48.178), (-49.162, -48.147999999999996), (-49.162, -48.117999999999995), (-49.162, -48.088), (-49.162, -48.058), (-49.162, -48.028), (-49.162, -47.998), (-49.162, -47.967999999999996), (-49.162, -47.937999999999995), (-49.162, -47.908), (-49.162, -47.878), (-49.162, -47.848), (-49.162, -47.818), (-49.162, -47.788), (-49.162, -47.757999999999996), (-49.132000000000005, -47.727999999999994), (-49.132000000000005, -47.698), (-49.132000000000005, -47.668), (-49.132000000000005, -47.638), (-49.132000000000005, -47.608), (-49.132000000000005, -47.577999999999996), (-49.132000000000005, -47.547999999999995), (-49.132000000000005, -47.518), (-49.132000000000005, -47.488), (-49.102000000000004, -47.458), (-49.072, -47.428), (-49.042, -47.397999999999996), (-49.042, -47.367999999999995), (-49.042, -47.338), (-49.012, -47.308), (-48.982, -47.278), (-48.952000000000005, -47.248), (-48.922000000000004, -47.217999999999996), (-48.892, -47.187999999999995), (-48.862, -47.158), (-48.832, -47.128), (-48.802, -47.098), (-48.772000000000006, -47.068), (-48.742000000000004, -47.038), (-48.712, -47.007999999999996), (-48.682, -46.977999999999994), (-48.652, -46.948), (-48.652, -46.918), (-48.652, -46.888), (-48.652, -46.858), (-48.652, -46.827999999999996), (-48.652, -46.797999999999995), (-48.652, -46.768), (-48.652, -46.738), (-48.652, -46.708), (-48.652, -46.678), (-48.652, -46.647999999999996), (-48.652, -46.617999999999995), (-48.652, -46.588), (-48.652, -46.558), (-48.652, -46.528), (-48.652, -46.498), (-48.652, -46.467999999999996), (-48.652, -46.437999999999995), (-48.652, -46.408), (-48.652, -46.378), (-48.622, -46.348), (-48.592000000000006, -46.318), (-48.562000000000005, -46.288), (-48.532000000000004, -46.257999999999996), (-48.502, -46.227999999999994), (-48.472, -46.198), (-48.442, -46.168), (-48.412000000000006, -46.138), (-48.382000000000005, -46.108), (-48.352000000000004, -46.077999999999996), (-48.322, -46.048), (-48.292, -46.018), (-48.262, -45.988), (-48.232, -45.958), (-48.232, -45.928), (-48.232, -45.897999999999996), (-48.232, -45.867999999999995), (-48.232, -45.838), (-48.202000000000005, -45.808), (-48.172000000000004, -45.778), (-48.142, -45.748), (-48.142, -45.717999999999996), (-48.142, -45.687999999999995), (-48.142, -45.658), (-48.142, -45.628), (-48.142, -45.598), (-48.142, -45.568), (-48.142, -45.538), (-48.142, -45.507999999999996), (-48.142, -45.477999999999994), (-48.112, -45.448), (-48.082, -45.418), (-48.052, -45.388), (-48.022000000000006, -45.358), (-47.992000000000004, -45.327999999999996), (-47.962, -45.298), (-47.932, -45.268), (-47.932, -45.238), (-47.932, -45.208), (-47.932, -45.178), (-47.932, -45.147999999999996), (-47.932, -45.117999999999995), (-47.932, -45.088), (-47.932, -45.058), (-47.932, -45.028), (-47.932, -44.998), (-47.932, -44.967999999999996), (-47.932, -44.937999999999995), (-47.932, -44.908), (-47.932, -44.878), (-47.932, -44.848), (-47.932, -44.818), (-47.932, -44.788), (-47.902, -44.757999999999996), (-47.872, -44.727999999999994), (-47.842, -44.698), (-47.812000000000005, -44.668), (-47.782000000000004, -44.638), (-47.782000000000004, -44.608), (-47.782000000000004, -44.577999999999996)]
        # self.global_path = [(-50.182, -50.068), (-50.152, -50.098), (-50.122, -50.098), (-50.092000000000006, -50.098), (-50.062000000000005, -50.098), (-50.032000000000004, -50.098), (-50.002, -50.098), (-49.972, -50.098), (-49.942, -50.098), (-49.912, -50.098), (-49.882000000000005, -50.098), (-49.852000000000004, -50.098), (-49.822, -50.098), (-49.792, -50.098), (-49.762, -50.098), (-49.732, -50.098), (-49.702000000000005, -50.098), (-49.672000000000004, -50.098), (-49.642, -50.098), (-49.612, -50.098), (-49.582, -50.098), (-49.552, -50.098), (-49.522000000000006, -50.098), (-49.492000000000004, -50.098), (-49.462, -50.098), (-49.432, -50.098), (-49.402, -50.098), (-49.372, -50.098), (-49.342000000000006, -50.098), (-49.312000000000005, -50.098), (-49.282000000000004, -50.098), (-49.252, -50.098), (-49.222, -50.098), (-49.192, -50.098), (-49.162, -50.098), (-49.132000000000005, -50.098), (-49.102000000000004, -50.098), (-49.072, -50.098), (-49.042, -50.098), (-49.012, -50.098), (-48.982, -50.098), (-48.952000000000005, -50.098), (-48.922000000000004, -50.098), (-48.892, -50.098), (-48.862, -50.098), (-48.832, -50.098), (-48.802, -50.098), (-48.772000000000006, -50.098), (-48.742000000000004, -50.098), (-48.712, -50.098), (-48.682, -50.098), (-48.652, -50.098), (-48.622, -50.098), (-48.592000000000006, -50.098), (-48.562000000000005, -50.098), (-48.532000000000004, -50.098), (-48.502, -50.098), (-48.472, -50.098), (-48.442, -50.098), (-48.412000000000006, -50.098), (-48.382000000000005, -50.098), (-48.352000000000004, -50.098), (-48.322, -50.098), (-48.292, -50.098), (-48.262, -50.098), (-48.232, -50.098), (-48.202000000000005, -50.098), (-48.172000000000004, -50.098), (-48.142, -50.098), (-48.112, -50.098), (-48.082, -50.098), (-48.052, -50.098), (-48.022000000000006, -50.098), (-47.992000000000004, -50.098), (-47.962, -50.098), (-47.932, -50.098), (-47.902, -50.098), (-47.872, -50.098), (-47.842, -50.098), (-47.812000000000005, -50.098), (-47.782000000000004, -50.098), (-47.752, -50.098), (-47.722, -50.098), (-47.692, -50.098), (-47.662000000000006, -50.098), (-47.632000000000005, -50.098), (-47.602000000000004, -50.098), (-47.572, -50.098), (-47.542, -50.098), (-47.512, -50.098), (-47.482, -50.098), (-47.452000000000005, -50.098), (-47.422000000000004, -50.098), (-47.392, -50.098), (-47.362, -50.098), (-47.332, -50.098), (-47.302, -50.098), (-47.272000000000006, -50.098), (-47.242000000000004, -50.098), (-47.212, -50.098), (-47.182, -50.098), (-47.152, -50.098), (-47.122, -50.098), (-47.092000000000006, -50.098), (-47.062000000000005, -50.098), (-47.032000000000004, -50.098), (-47.002, -50.098), (-46.972, -50.098), (-46.942, -50.098), (-46.912000000000006, -50.098), (-46.882000000000005, -50.098), (-46.852000000000004, -50.098), (-46.822, -50.098), (-46.792, -50.098), (-46.762, -50.098), (-46.732, -50.098), (-46.702000000000005, -50.098), (-46.672000000000004, -50.098), (-46.642, -50.098), (-46.612, -50.098), (-46.582, -50.098), (-46.552, -50.098), (-46.522000000000006, -50.098), (-46.492000000000004, -50.098), (-46.462, -50.098), (-46.432, -50.098), (-46.402, -50.098), (-46.372, -50.098), (-46.342000000000006, -50.098), (-46.312000000000005, -50.098), (-46.282000000000004, -50.098), (-46.252, -50.098), (-46.222, -50.098), (-46.192, -50.098), (-46.162000000000006, -50.098), (-46.132000000000005, -50.098), (-46.102000000000004, -50.098), (-46.072, -50.098), (-46.042, -50.098), (-46.012, -50.098), (-45.982, -50.098), (-45.952000000000005, -50.128), (-45.922000000000004, -50.158), (-45.892, -50.187999999999995), (-45.862, -50.217999999999996), (-45.832, -50.248), (-45.802, -50.278), (-45.772000000000006, -50.308), (-45.742000000000004, -50.338), (-45.712, -50.367999999999995), (-45.682, -50.397999999999996), (-45.652, -50.428), (-45.622, -50.458), (-45.592, -50.488), (-45.562000000000005, -50.518), (-45.532000000000004, -50.547999999999995), (-45.502, -50.577999999999996), (-45.472, -50.608), (-45.442, -50.638), (-45.412000000000006, -50.668), (-45.382000000000005, -50.698), (-45.352000000000004, -50.727999999999994), (-45.322, -50.757999999999996), (-45.292, -50.788), (-45.262, -50.818), (-45.232, -50.848), (-45.202000000000005, -50.878), (-45.172000000000004, -50.908), (-45.142, -50.937999999999995), (-45.112, -50.967999999999996), (-45.082, -50.998), (-45.052, -51.028), (-45.022000000000006, -51.058), (-44.992000000000004, -51.088), (-44.962, -51.117999999999995), (-44.932, -51.147999999999996), (-44.902, -51.178), (-44.872, -51.208), (-44.842, -51.238), (-44.812000000000005, -51.268), (-44.782000000000004, -51.297999999999995), (-44.752, -51.327999999999996), (-44.722, -51.358), (-44.692, -51.388), (-44.662000000000006, -51.418), (-44.632000000000005, -51.448), (-44.602000000000004, -51.477999999999994), (-44.572, -51.507999999999996), (-44.542, -51.507999999999996), (-44.512, -51.507999999999996), (-44.482, -51.507999999999996), (-44.452000000000005, -51.507999999999996), (-44.422000000000004, -51.507999999999996), (-44.392, -51.507999999999996), (-44.362, -51.507999999999996), (-44.332, -51.507999999999996), (-44.302, -51.507999999999996), (-44.272000000000006, -51.507999999999996), (-44.242000000000004, -51.507999999999996), (-44.212, -51.507999999999996), (-44.182, -51.507999999999996), (-44.152, -51.507999999999996), (-44.122, -51.538), (-44.122, -51.568), (-44.092, -51.598), (-44.062000000000005, -51.628), (-44.092, -51.658), (-44.092, -51.687999999999995), (-44.092, -51.717999999999996), (-44.122, -51.748), (-44.152, -51.778), (-44.182, -51.808), (-44.212, -51.838), (-44.242000000000004, -51.867999999999995), (-44.272000000000006, -51.897999999999996), (-44.302, -51.928), (-44.332, -51.958), (-44.362, -51.988), (-44.392, -52.018), (-44.422000000000004, -52.047999999999995), (-44.452000000000005, -52.077999999999996), (-44.482, -52.108), (-44.512, -52.138), (-44.542, -52.168), (-44.572, -52.198), (-44.602000000000004, -52.227999999999994), (-44.632000000000005, -52.257999999999996), (-44.662000000000006, -52.288), (-44.692, -52.318), (-44.722, -52.348), (-44.752, -52.378), (-44.782000000000004, -52.408), (-44.812000000000005, -52.437999999999995), (-44.842, -52.467999999999996), (-44.872, -52.498), (-44.902, -52.528), (-44.932, -52.558), (-44.962, -52.588), (-44.992000000000004, -52.617999999999995), (-45.022000000000006, -52.647999999999996), (-45.052, -52.678), (-45.082, -52.708), (-45.112, -52.738), (-45.142, -52.768), (-45.172000000000004, -52.797999999999995), (-45.202000000000005, -52.827999999999996), (-45.232, -52.858), (-45.262, -52.888), (-45.262, -52.918), (-45.292, -52.948), (-45.322, -52.977999999999994), (-45.322, -53.007999999999996), (-45.322, -53.038), (-45.322, -53.068), (-45.322, -53.098), (-45.322, -53.128), (-45.352000000000004, -53.158), (-45.352000000000004, -53.187999999999995), (-45.352000000000004, -53.217999999999996), (-45.352000000000004, -53.248), (-45.352000000000004, -53.278), (-45.352000000000004, -53.308), (-45.352000000000004, -53.338), (-45.352000000000004, -53.367999999999995), (-45.352000000000004, -53.397999999999996), (-45.352000000000004, -53.428), (-45.352000000000004, -53.458), (-45.322, -53.488), (-45.322, -53.518), (-45.322, -53.547999999999995), (-45.322, -53.577999999999996), (-45.322, -53.608), (-45.322, -53.638), (-45.322, -53.668), (-45.352000000000004, -53.698), (-45.352000000000004, -53.727999999999994), (-45.352000000000004, -53.757999999999996), (-45.352000000000004, -53.788), (-45.352000000000004, -53.818), (-45.352000000000004, -53.848), (-45.322, -53.878), (-45.322, -53.908), (-45.322, -53.937999999999995), (-45.322, -53.967999999999996), (-45.322, -53.998), (-45.322, -54.028), (-45.322, -54.058), (-45.322, -54.087999999999994), (-45.322, -54.117999999999995), (-45.322, -54.147999999999996), (-45.322, -54.178), (-45.352000000000004, -54.208), (-45.352000000000004, -54.238), (-45.352000000000004, -54.268), (-45.352000000000004, -54.297999999999995), (-45.352000000000004, -54.327999999999996), (-45.352000000000004, -54.358), (-45.382000000000005, -54.388), (-45.352000000000004, -54.418), (-45.382000000000005, -54.448), (-45.412000000000006, -54.477999999999994), (-45.442, -54.507999999999996), (-45.472, -54.538), (-45.472, -54.568), (-45.472, -54.598), (-45.502, -54.628), (-45.502, -54.658), (-45.502, -54.687999999999995), (-45.532000000000004, -54.717999999999996), (-45.502, -54.748), (-45.532000000000004, -54.778), (-45.532000000000004, -54.808), (-45.532000000000004, -54.837999999999994), (-45.562000000000005, -54.867999999999995), (-45.592, -54.897999999999996), (-45.562000000000005, -54.928), (-45.562000000000005, -54.958), (-45.532000000000004, -54.988), (-45.532000000000004, -55.018), (-45.502, -55.047999999999995), (-45.502, -55.077999999999996), (-45.502, -55.108), (-45.502, -55.138), (-45.532000000000004, -55.168), (-45.532000000000004, -55.198), (-45.562000000000005, -55.227999999999994), (-45.562000000000005, -55.257999999999996), (-45.562000000000005, -55.288), (-45.592, -55.318), (-45.622, -55.348), (-45.652, -55.378), (-45.652, -55.408), (-45.652, -55.437999999999995), (-45.682, -55.467999999999996), (-45.712, -55.498), (-45.742000000000004, -55.528), (-45.772000000000006, -55.558), (-45.742000000000004, -55.587999999999994), (-45.742000000000004, -55.617999999999995), (-45.772000000000006, -55.647999999999996), (-45.802, -55.678), (-45.802, -55.708), (-45.772000000000006, -55.738), (-45.802, -55.768), (-45.832, -55.797999999999995), (-45.862, -55.827999999999996), (-45.892, -55.858), (-45.922000000000004, -55.888), (-45.892, -55.918), (-45.862, -55.948), (-45.892, -55.977999999999994), (-45.922000000000004, -56.007999999999996), (-45.952000000000005, -56.038), (-45.982, -56.038)]
        self.current_goal_idx = 0

        # 목표 지점 설정
        self.goal = Point()
        self.set_new_goal()

    def scan_callback(self, msg):
        """ LaserScan 데이터를 받아 현재 위치와 heading 업데이트 """
        self.pose_x = msg.range_min  # 예제 코드 (실제 데이터 적용 필요)
        self.pose_y = msg.scan_time  # 예제 코드 (실제 데이터 적용 필요)

        # heading 값 계산 (예제, 실제 데이터에서 계산 필요)
        self.heading = (msg.time_increment + 360) % 360
        # print(f"현재 위치: ({round(self.pose_x, 3)}, {round(self.pose_y, 3)})")
        # print(f"현재 heading: {round(self.heading, 2)}°")

    def global_path_callback(self, msg):
        
        path = [(pose.pose.position.x, pose.pose.position.y) for pose in msg.poses]
        self.global_path = path
        self.goal.x = path[0][0]
        self.goal.y = path[0][1]
        print(path)

        self.is_to_move = True

    def set_new_goal(self):
        print(self.current_goal_idx, '인덱스')
        print(self.global_path[self.current_goal_idx], '다음좌표')
        """ 현재 목표를 리스트에서 설정 """
        if self.current_goal_idx < len(self.global_path):
            self.goal.x, self.goal.y = self.global_path[self.current_goal_idx]
        else:
            self.turtlebot_stop()
            self.get_logger().info("finish =========")
            self.is_to_move = False
            # rclpy.shutdown()

    def move_to_destination(self):
        if self.is_to_move == False: return 

        vel_msg = Twist()
        print(f"현재 위치: ({round(self.pose_x, 3)}, {round(self.pose_y, 3)})")
        print(f'목표 위치: ({round(self.goal.x, 3)}, {round(self.goal.y, 3)})')
        # 현재 목표까지의 거리 계산
        distance = math.sqrt((self.goal.x - self.pose_x) ** 2 + (self.goal.y - self.pose_y) ** 2)

        # 목표 지점 도착 여부 확인
        if distance < 0.1:
            # self.get_logger().info(f"목표 지점 {self.current_goal_idx} 도착. 잠시 정지합니다.")
            print(f"목표 지점 {self.current_goal_idx} 도착. 잠시 정지합니다.")
            # 목표 지점 도착 후 1초 정지
            self.turtlebot_stop()
            self.current_goal_idx += 1
            self.set_new_goal()
            return

        # 목표 heading 계산
        target_heading = math.degrees(math.atan2(-(self.goal.x - self.pose_x), self.goal.y - self.pose_y))
        target_heading = (target_heading + 360) % 360  # 0~360도로 변환

        # 현재 heading과 목표 heading 비교 (최단 회전 경로 고려)
        angle_diff = (target_heading - self.heading + 540) % 360 - 180

        # 🔹 heading이 목표와 5도 이상 차이나면 회전
        if abs(angle_diff) > 5:
            kp_angular = 0.02  # 회전 속도 조절 계수 (값을 더 키워도 됨)
            max_angular_speed = 1.0  # 최대 회전 속도 제한

            # 회전 속도를 angle_diff에 비례하도록 조정 (단, 최대 속도 제한)
            vel_msg.angular.z = -max(min(kp_angular * angle_diff, max_angular_speed), -max_angular_speed)
            vel_msg.linear.x = 0.0  # 회전 중 직진 금지
            # print(f'현재 heading: {self.heading}')
            # print(f'현재 각속도: {vel_msg.angular.z}')

        else:
            # 🔹 heading 차이가 5도 이하라면 직진
            kp_linear = 1  # 이동 속도 조절 계수
            vel_msg.linear.x = min(kp_linear * distance, 0.7)  # 최대 속도 0.5
            vel_msg.angular.z = 0.0  # 직진 시 회전 없음

        # 디버깅 출력

        self.pub.publish(vel_msg)

    def turtlebot_stop(self):
        # self.get_logger().info("Turtlebot stopping")
        self.cmd_msg.linear.x = 0.0
        self.cmd_msg.angular.z = 0.0


def main(args=None):
    rclpy.init(args=args)
    controller = Controller()
    rclpy.spin(controller)
    controller.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()