# import rclpy
# from rclpy.node import Node

# from geometry_msgs.msg import Twist
# from ssafy_msgs.msg import TurtlebotStatus, EnviromentStatus
# from std_msgs.msg import Int8MultiArray
# from math import sqrt
# from geometry_msgs.msg import PoseStamped 
# from sensor_msgs.msg import LaserScan

# import paho.mqtt.client as mqtt  # MQTT 라이브러리 추가
# import json  # 데이터를 JSON으로 변환하기 위함

# from .human_detector import HumanDetector # 사람 감지 
# from sensor_msgs.msg import CompressedImage

# class Controller(Node):

#     def __init__(self):
#         super().__init__('controller')
        
#         self.cmd_publisher = self.create_publisher(Twist, 'cmd_vel', 10)
#         self.app_control_pub = self.create_publisher(Int8MultiArray, 'app_control', 10)

#         self.turtlebot_status_sub = self.create_subscription(TurtlebotStatus, '/turtlebot_status', self.listener_callback, 10)
#         self.envir_status_sub = self.create_subscription(EnviromentStatus, '/envir_status', self.envir_callback, 10)
#         self.app_status_sub = self.create_subscription(Int8MultiArray, '/app_status', self.app_callback, 10)
        
#         self.scan_sub = self.create_subscription(LaserScan, '/scan', self.scan_callback, 10)
#         #self.img_sub = self.create_subscription(CompressedImage, '/image_jpeg/compressed', self.img_callback, 10)
        

#         self.cmd_msg = Twist()
        
#         self.app_control_msg = Int8MultiArray()
#         self.app_control_msg.data = [0] * 17

#         self.turtlebot_status_msg = TurtlebotStatus()
#         self.envir_status_msg = EnviromentStatus()
#         self.app_status_msg = Int8MultiArray()
#         self.is_turtlebot_status = False
#         self.is_app_status = False
#         self.is_envir_status = False

#         # MQTT Client 설정
#         self.mqtt_client = mqtt.Client()
#         self.mqtt_client.on_connect = self.on_connect
#         self.mqtt_client.on_message = self.on_message

#         self.pose_x = 0.0  # 로봇의 x 좌표
#         self.pose_y = 0.0  # 로봇의 y 좌표
#         self.moving = True

#         # MQTT 메시지를 통해 x,y 좌표를 받음 
#         self.mqtt_broker = "j12e103.p.ssafy.io"
#         self.mqtt_port = 1883
#         self.mqtt_topic = "robot/destination"
#         self.mqtt_username = "happie_mqtt_user"
#         self.mqtt_password = "gkstkfckdl0411!"
        
#         self.mqtt_client.username_pw_set(self.mqtt_username, self.mqtt_password)
#         self.mqtt_client.connect(self.mqtt_broker, self.mqtt_port, 60)
#         self.mqtt_client.subscribe(self.mqtt_topic)  # 목적지 좌표 수신
#         self.mqtt_client.loop_start()

#         self.destination_x = 0.0
#         self.destination_y = 0.0

#         self.human_detector = HumanDetector()

#         self.moving = True
#         self.timer = self.create_timer(0.033, self.timer_callback)


#     # MQTT 연결 완료 시 호출되는 콜백 함수
#     def on_connect(self, client, userdata, flags, rc):
#         self.get_logger().info(f"Connected to MQTT broker with result code {rc}")

#     # MQTT 메시지 수신 시 호출되는 콜백 함수
#     def on_message(self, client, userdata, msg):
#         try:
#             payload = json.loads(msg.payload.decode())
#             self.destination_x = payload.get('x', 0.0)  # x 좌표
#             self.destination_y = payload.get('y', 0.0)  # y 좌표
            
#             self.get_logger().info(f"Received destination: x={self.destination_x}, y={self.destination_y}")
#         except json.JSONDecodeError:
#             self.get_logger().error("Failed to decode MQTT message")


#     #def img_callback(self, msg):
#         # 카메라 이미지를 받아서 처리
#     #    np_arr = np.frombuffer(msg.data, np.uint8)
#     #    self.img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    
#     def scan_callback(self, msg):
#         self.pose_x = msg.range_min  # range_min을 x 좌표로 설정
#         self.pose_y = msg.scan_time  # scan_time을 y 좌표로 설정

#         self.get_logger().info(f"Updated pose from /scan: x={self.pose_x}, y={self.pose_y}")

#         #destination_x = -5.3  # 임의로 설정한 x 좌표
#         #destination_y = -6.3  # 임의로 설정한 y 좌표
#         #self.move_to_destination(destination_x, destination_y)
        

#         # 사람을 감지하면 로봇을 멈추게 함
#         if self.detect_human(msg):
#             self.get_logger().info("Human detected! Stopping the robot.")
#             self.turtlebot_stop()
#         else:
#             self.move_to_destination(self.destination_x, self.destination_y)


#     # goal_pose를 퍼블리시
#     def move_to_destination(self, x, y):
#         self.get_logger().info(f"Moving to destination: ({x}, {y})")

#         # 로봇의 현재 위치 
#         current_x = self.pose_x   # scan_callback에서 받은 range_min을 x 좌표로 사용
#         current_y = self.pose_y   # scan_callback에서 받은 scan_time을 y 좌표로 사용
#         print(current_x)
#         print(current_y)


#         # 목표 위치와 현재 위치의 차이
#         distance = sqrt((x - current_x)**2 + (y - current_y)**2)
#         print("------------")
#         print(distance)
#         # 목표 위치에 근접하면 멈추기
#         if distance < 0.5:
#             self.turtlebot_stop()
#             #self.get_logger().info("Destination reached, stopping the robot.")
#             print("멈추기")
#         else:
#             # 사람을 감지하면 로봇 멈춤
#             if self.detect_human():
#                 self.get_logger().info("Human detected! Stopping the robot.")
#                 self.turtlebot_stop()
            
#             else:
#                 print("직진")
#                 #self.cmd_msg.linear.x = 0.5  # 직진 속도
#                 #self.cmd_msg.angular.z = 0.0  # 회전하지 않음
#                 #self.cmd_publisher.publish(self.cmd_msg)
#                 self.turtlebot_go() 

#     def detect_human(self, scan_data):
#         return self.human_detector.detect_human(scan_data)  # scan_data를 넘겨줌

#     def listener_callback(self, msg):
#         self.is_turtlebot_status = True
#         self.turtlebot_status_msg = msg

#     def envir_callback(self, msg):
#         self.is_envir_status = True
#         self.envir_status_msg = msg

#     def app_callback(self, msg):
#         self.is_app_status = True
#         self.app_status_msg = msg  

#     def app_all_on(self):
#         # self.get_logger().info("Turning all appliances ON")
#         self.app_control_msg.data = [1] * 17
#         self.app_control_pub.publish(self.app_control_msg)
        
#     def app_all_off(self):
#         # self.get_logger().info("Turning all appliances OFF")
#         self.app_control_msg.data = [2] * 17
#         self.app_control_pub.publish(self.app_control_msg)
        
#     def app_on_select(self, num):
#         # self.get_logger().info(f"Turning appliance {num} ON")
#         self.app_control_msg.data[num] = 1
#         self.app_control_pub.publish(self.app_control_msg)

#     def app_off_select(self, num):
#         # self.get_logger().info(f"Turning appliance {num} OFF")
#         self.app_control_msg.data[num] = 2
#         self.app_control_pub.publish(self.app_control_msg)

#     def turtlebot_go(self):
#         #self.get_logger().info("Turtlebot moving forward")
#         self.get_logger().info("Turtlebot gogogo")
#         self.cmd_msg.linear.x = 1.0
#         self.cmd_msg.angular.z = 0.0
#         self.cmd_publisher.publish(self.cmd_msg)

#     def turtlebot_stop(self):
#         # self.get_logger().info("Turtlebot stopping")
#         self.cmd_msg.linear.x = 0.0
#         self.cmd_msg.angular.z = 0.0

#     def turtlebot_cw_rot(self):
#         # self.get_logger().info("Turtlebot rotating clockwise")
#         self.cmd_msg.linear.x = 0.0
#         self.cmd_msg.angular.z = -0.5

#     def turtlebot_cww_rot(self):
#         # self.get_logger().info("Turtlebot rotating counter-clockwise")
#         self.cmd_msg.linear.x = 0.0
#         self.cmd_msg.angular.z = 0.5

#     def timer_callback(self):
#         # self.turtlebot_cw_rot()
#         #self.turtlebot_go()

#         # if self.is_turtlebot_status:
#         #     # self.get_logger().info(f"Turtlebot Status: Linear Vel: {self.turtlebot_status_msg.twist.linear.x}, "
#         #     #                        f"Angular Vel: {self.turtlebot_status_msg.twist.angular.z}, "
#         #     #                        f"Battery Percentage: {self.turtlebot_status_msg.battery_percentage}, "
#         #     #                        f"Power Supply Status: {self.turtlebot_status_msg.power_supply_status}")
            
#         # if self.is_envir_status:
#         #     # self.get_logger().info(f"Environment Status: {self.envir_status_msg.month}/{self.envir_status_msg.day} "
#         #     #            f"{self.envir_status_msg.hour}:{self.envir_status_msg.minute}, "
#         #     #            f"Temperature: {self.envir_status_msg.temperature}°C, Weather: {self.envir_status_msg.weather}")
        
#         # if self.is_app_status:
#         #     # self.get_logger().info(f"Appliance Status: {self.app_status_msg.data}")


#         # 주기적으로 상태 점검: 사람이 감지되지 않으면 이동을 재개
#         if not self.detect_human():
#             if not self.moving:
#                 self.get_logger().info("No human detected, resuming movement.")
#                 self.turtlebot_go()  # 사람 감지되지 않으면 이동 재개
#                 self.moving = True
#         else:
#             if self.moving:
#                 self.get_logger().info("Human detected, stopping the movement.")
#                 self.turtlebot_stop()  # 사람 감지되면 멈추기
#                 self.moving = False


# def main(args=None):
#     rclpy.init(args=args)
#     sub1_controller = Controller()
#     rclpy.spin(sub1_controller)
#     sub1_controller.destroy_node()
#     rclpy.shutdown()

# if __name__ == '__main__':
#     main()


# self.test_path = [(-50.06696441650391, -50.065105438232), (-50.036964416503906, -50.035105438232), (-50.006964416503905, -50.005105438232), (-49.976964416503904, -49.975105438232), (-49.9469644165039, -49.945105438232005), (-49.91696441650391, -49.915105438232004), (-49.88696441650391, -49.885105438232), (-49.85696441650391, -49.855105438232), (-49.826964416503905, -49.825105438232), (-49.796964416503904, -49.795105438232), (-49.7669644165039, -49.765105438232005), (-49.73696441650391, -49.735105438232004), (-49.70696441650391, -49.705105438232), (-49.67696441650391, -49.675105438232), (-49.646964416503906, -49.645105438232), (-49.616964416503905, -49.615105438232), (-49.5869644165039, -49.585105438232006), (-49.55696441650391, -49.555105438232005), (-49.52696441650391, -49.525105438232), (-49.49696441650391, -49.495105438232), (-49.466964416503906, -49.465105438232), (-49.436964416503905, -49.435105438232), (-49.406964416503904, -49.405105438232006), (-49.37696441650391, -49.375105438232005), (-49.34696441650391, -49.345105438232004), (-49.31696441650391, -49.315105438232), (-49.286964416503906, -49.285105438232), (-49.256964416503905, -49.255105438232), (-49.226964416503904, -49.225105438232), (-49.1969644165039, -49.195105438232005), (-49.16696441650391, -49.165105438232004), (-49.13696441650391, -49.135105438232), (-49.10696441650391, -49.105105438232), (-49.076964416503905, -49.075105438232), (-49.046964416503904, -49.045105438232), (-49.0169644165039, -49.015105438232005), (-48.98696441650391, -48.985105438232004), (-48.95696441650391, -48.955105438232), (-48.92696441650391, -48.925105438232), (-48.896964416503906, -48.895105438232), (-48.866964416503905, -48.865105438232), (-48.8369644165039, -48.835105438232006), (-48.80696441650391, -48.805105438232005), (-48.77696441650391, -48.775105438232), (-48.74696441650391, -48.745105438232), (-48.716964416503906, -48.715105438232), (-48.686964416503905, -48.685105438232), (-48.656964416503904, -48.655105438232006), (-48.62696441650391, -48.625105438232005), (-48.59696441650391, -48.595105438232004), (-48.56696441650391, -48.565105438232), (-48.536964416503906, -48.535105438232), (-48.506964416503905, -48.505105438232), (-48.476964416503904, -48.475105438232006), (-48.4469644165039, -48.445105438232005), (-48.41696441650391, -48.415105438232004), (-48.38696441650391, -48.385105438232), (-48.35696441650391, -48.385105438232), (-48.326964416503905, -48.385105438232), (-48.296964416503904, -48.385105438232), (-48.2669644165039, -48.385105438232), (-48.23696441650391, -48.385105438232), (-48.20696441650391, -48.385105438232), (-48.17696441650391, -48.385105438232), (-48.146964416503906, -48.385105438232), (-48.116964416503905, -48.385105438232), (-48.0869644165039, -48.355105438232), (-48.05696441650391, -48.355105438232), (-48.02696441650391, -48.355105438232), (-47.99696441650391, -48.355105438232), (-47.966964416503906, -48.355105438232), (-47.936964416503905, -48.355105438232), (-47.906964416503904, -48.355105438232), (-47.87696441650391, -48.355105438232), (-47.84696441650391, -48.355105438232), (-47.81696441650391, -48.355105438232), (-47.786964416503906, -48.355105438232), (-47.756964416503905, -48.355105438232), (-47.726964416503904, -48.355105438232), (-47.6969644165039, -48.355105438232), (-47.66696441650391, -48.355105438232), (-47.63696441650391, -48.355105438232), (-47.60696441650391, -48.355105438232), (-47.576964416503905, -48.355105438232), (-47.546964416503904, -48.355105438232), (-47.5169644165039, -48.355105438232), (-47.48696441650391, -48.355105438232), (-47.45696441650391, -48.355105438232), (-47.42696441650391, -48.355105438232), (-47.396964416503906, -48.355105438232), (-47.366964416503905, -48.355105438232), (-47.3369644165039, -48.355105438232), (-47.30696441650391, -48.355105438232), (-47.27696441650391, -48.355105438232), (-47.24696441650391, -48.355105438232), (-47.216964416503906, -48.355105438232), (-47.186964416503905, -48.355105438232), (-47.156964416503904, -48.355105438232), (-47.12696441650391, -48.355105438232), (-47.09696441650391, -48.355105438232), (-47.06696441650391, -48.355105438232), (-47.036964416503906, -48.355105438232), (-47.006964416503905, -48.355105438232), (-46.976964416503904, -48.355105438232), (-46.9469644165039, -48.355105438232), (-46.91696441650391, -48.355105438232), (-46.88696441650391, -48.355105438232), (-46.85696441650391, -48.355105438232), (-46.826964416503905, -48.355105438232), (-46.796964416503904, -48.355105438232), (-46.7669644165039, -48.355105438232), (-46.73696441650391, -48.355105438232), (-46.70696441650391, -48.355105438232), (-46.67696441650391, -48.355105438232), (-46.646964416503906, -48.355105438232), (-46.616964416503905, -48.355105438232), (-46.5869644165039, -48.355105438232), (-46.55696441650391, -48.355105438232), (-46.52696441650391, -48.355105438232), (-46.49696441650391, -48.355105438232), (-46.466964416503906, -48.355105438232), (-46.436964416503905, -48.355105438232), (-46.406964416503904, -48.355105438232), (-46.37696441650391, -48.355105438232), (-46.34696441650391, -48.355105438232), (-46.31696441650391, -48.355105438232), (-46.286964416503906, -48.355105438232), (-46.256964416503905, -48.355105438232), (-46.226964416503904, -48.355105438232), (-46.1969644165039, -48.355105438232), (-46.16696441650391, -48.355105438232), (-46.13696441650391, -48.355105438232), (-46.10696441650391, -48.355105438232), (-46.076964416503905, -48.355105438232), (-46.046964416503904, -48.355105438232), (-46.01696441650391, -48.355105438232), (-45.98696441650391, -48.355105438232), (-45.95696441650391, -48.355105438232), (-45.92696441650391, -48.355105438232), (-45.896964416503906, -48.355105438232), (-45.866964416503905, -48.355105438232), (-45.8369644165039, -48.355105438232), (-45.80696441650391, -48.355105438232), (-45.77696441650391, -48.355105438232), (-45.74696441650391, -48.355105438232), (-45.716964416503906, -48.355105438232), (-45.686964416503905, -48.355105438232), (-45.656964416503904, -48.355105438232), (-45.62696441650391, -48.355105438232), (-45.59696441650391, -48.355105438232), (-45.56696441650391, -48.355105438232), (-45.536964416503906, -48.355105438232), (-45.506964416503905, -48.355105438232), (-45.476964416503904, -48.355105438232), (-45.4469644165039, -48.355105438232), (-45.41696441650391, -48.355105438232), (-45.38696441650391, -48.355105438232), (-45.35696441650391, -48.355105438232), (-45.326964416503905, -48.355105438232), (-45.296964416503904, -48.355105438232), (-45.26696441650391, -48.355105438232), (-45.23696441650391, -48.355105438232), (-45.20696441650391, -48.355105438232), (-45.17696441650391, -48.355105438232), (-45.146964416503906, -48.355105438232), (-45.116964416503905, -48.355105438232), (-45.0869644165039, -48.355105438232), (-45.05696441650391, -48.355105438232), (-45.02696441650391, -48.355105438232), (-44.99696441650391, -48.355105438232), (-44.966964416503906, -48.355105438232), (-44.936964416503905, -48.355105438232), (-44.906964416503904, -48.355105438232), (-44.87696441650391, -48.355105438232), (-44.84696441650391, -48.355105438232), (-44.81696441650391, -48.355105438232), (-44.786964416503906, -48.355105438232), (-44.756964416503905, -48.355105438232), (-44.726964416503904, -48.355105438232), (-44.6969644165039, -48.355105438232), (-44.66696441650391, -48.355105438232), (-44.63696441650391, -48.355105438232), (-44.60696441650391, -48.355105438232), (-44.576964416503905, -48.355105438232), (-44.546964416503904, -48.355105438232), (-44.51696441650391, -48.355105438232), (-44.48696441650391, -48.355105438232), (-44.45696441650391, -48.355105438232), (-44.42696441650391, -48.355105438232), (-44.396964416503906, -48.355105438232), (-44.366964416503905, -48.355105438232), (-44.3369644165039, -48.355105438232), (-44.30696441650391, -48.355105438232), (-44.27696441650391, -48.355105438232), (-44.24696441650391, -48.355105438232), (-44.216964416503906, -48.355105438232), (-44.186964416503905, -48.355105438232), (-44.156964416503904, -48.355105438232), (-44.12696441650391, -48.355105438232), (-44.09696441650391, -48.355105438232), (-44.06696441650391, -48.355105438232), (-44.036964416503906, -48.355105438232), (-44.006964416503905, -48.355105438232), (-43.976964416503904, -48.355105438232), (-43.9469644165039, -48.355105438232), (-43.91696441650391, -48.355105438232), (-43.88696441650391, -48.355105438232), (-43.85696441650391, -48.355105438232), (-43.826964416503905, -48.355105438232), (-43.796964416503904, -48.355105438232), (-43.76696441650391, -48.355105438232), (-43.73696441650391, -48.355105438232), (-43.70696441650391, -48.355105438232), (-43.67696441650391, -48.355105438232), (-43.646964416503906, -48.355105438232), (-43.616964416503905, -48.325105438232), (-43.5869644165039, -48.325105438232), (-43.55696441650391, -48.325105438232), (-43.52696441650391, -48.325105438232), (-43.49696441650391, -48.325105438232), (-43.466964416503906, -48.325105438232), (-43.436964416503905, -48.325105438232), (-43.406964416503904, -48.325105438232), (-43.37696441650391, -48.325105438232), (-43.34696441650391, -48.325105438232), (-43.31696441650391, -48.295105438232), (-43.286964416503906, -48.295105438232), (-43.256964416503905, -48.265105438232005), (-43.226964416503904, -48.235105438232004), (-43.1969644165039, -48.205105438232), (-43.16696441650391, -48.175105438232), (-43.13696441650391, -48.145105438232), (-43.10696441650391, -48.115105438232), (-43.076964416503905, -48.085105438232006), (-43.046964416503904, -48.055105438232005), (-43.01696441650391, -48.025105438232), (-42.98696441650391, -47.995105438232), (-42.95696441650391, -47.965105438232), (-42.92696441650391, -47.935105438232), (-42.896964416503906, -47.905105438232), (-42.866964416503905, -47.875105438232005), (-42.8369644165039, -47.845105438232004), (-42.80696441650391, -47.815105438232), (-42.77696441650391, -47.785105438232), (-42.74696441650391, -47.755105438232), (-42.716964416503906, -47.725105438232006), (-42.686964416503905, -47.695105438232005), (-42.656964416503904, -47.665105438232004), (-42.62696441650391, -47.635105438232), (-42.59696441650391, -47.605105438232), (-42.56696441650391, -47.575105438232), (-42.536964416503906, -47.545105438232), (-42.506964416503905, -47.515105438232005), (-42.476964416503904, -47.485105438232004), (-42.4469644165039, -47.455105438232), (-42.41696441650391, -47.425105438232), (-42.38696441650391, -47.395105438232), (-42.35696441650391, -47.365105438232)]

        

        
import math
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist, Point
from sensor_msgs.msg import LaserScan
import time

class Controller(Node):
    def __init__(self):
        super().__init__('controller')
        self.pub = self.create_publisher(Twist, '/cmd_vel', 10)
        self.scan_sub = self.create_subscription(LaserScan, '/scan', self.scan_callback, 1)

        self.cmd_msg = Twist()

        # 현재 위치 및 방향
        self.pose_x = 0.0
        self.pose_y = 0.0
        self.heading = 0.0  # LaserScan에서 계산

        # 이동 타이머 설정
        self.timer = self.create_timer(0.1, self.move_to_destination)

        # 목표 경로 설정
        # self.test_path = [(-50.06696441650391, -50.065105438232), (-50.036964416503906, -50.035105438232), (-50.006964416503905, -50.005105438232), (-49.976964416503904, -49.975105438232), (-49.9469644165039, -49.945105438232005), (-49.91696441650391, -49.915105438232004), (-49.88696441650391, -49.885105438232), (-49.85696441650391, -49.855105438232), (-49.826964416503905, -49.825105438232), (-49.796964416503904, -49.795105438232), (-49.7669644165039, -49.765105438232005), (-49.73696441650391, -49.735105438232004), (-49.70696441650391, -49.705105438232), (-49.67696441650391, -49.675105438232), (-49.646964416503906, -49.645105438232), (-49.616964416503905, -49.615105438232), (-49.5869644165039, -49.585105438232006), (-49.55696441650391, -49.555105438232005), (-49.52696441650391, -49.525105438232), (-49.49696441650391, -49.495105438232), (-49.466964416503906, -49.465105438232), (-49.436964416503905, -49.435105438232), (-49.406964416503904, -49.405105438232006), (-49.37696441650391, -49.375105438232005), (-49.34696441650391, -49.345105438232004), (-49.31696441650391, -49.315105438232), (-49.286964416503906, -49.285105438232), (-49.256964416503905, -49.255105438232), (-49.226964416503904, -49.225105438232), (-49.1969644165039, -49.195105438232005), (-49.16696441650391, -49.165105438232004), (-49.13696441650391, -49.135105438232), (-49.10696441650391, -49.105105438232), (-49.076964416503905, -49.075105438232), (-49.046964416503904, -49.045105438232), (-49.0169644165039, -49.015105438232005), (-48.98696441650391, -48.985105438232004), (-48.95696441650391, -48.955105438232), (-48.92696441650391, -48.925105438232), (-48.896964416503906, -48.895105438232), (-48.866964416503905, -48.865105438232), (-48.8369644165039, -48.835105438232006), (-48.80696441650391, -48.805105438232005), (-48.77696441650391, -48.775105438232), (-48.74696441650391, -48.745105438232), (-48.716964416503906, -48.715105438232), (-48.686964416503905, -48.685105438232), (-48.656964416503904, -48.655105438232006), (-48.62696441650391, -48.625105438232005), (-48.59696441650391, -48.595105438232004), (-48.56696441650391, -48.565105438232), (-48.536964416503906, -48.535105438232), (-48.506964416503905, -48.505105438232), (-48.476964416503904, -48.475105438232006), (-48.4469644165039, -48.445105438232005), (-48.41696441650391, -48.415105438232004), (-48.38696441650391, -48.385105438232), (-48.35696441650391, -48.385105438232), (-48.326964416503905, -48.385105438232), (-48.296964416503904, -48.385105438232), (-48.2669644165039, -48.385105438232), (-48.23696441650391, -48.385105438232), (-48.20696441650391, -48.385105438232), (-48.17696441650391, -48.385105438232), (-48.146964416503906, -48.385105438232), (-48.116964416503905, -48.385105438232), (-48.0869644165039, -48.355105438232), (-48.05696441650391, -48.355105438232), (-48.02696441650391, -48.355105438232), (-47.99696441650391, -48.355105438232), (-47.966964416503906, -48.355105438232), (-47.936964416503905, -48.355105438232), (-47.906964416503904, -48.355105438232), (-47.87696441650391, -48.355105438232), (-47.84696441650391, -48.355105438232), (-47.81696441650391, -48.355105438232), (-47.786964416503906, -48.355105438232), (-47.756964416503905, -48.355105438232), (-47.726964416503904, -48.355105438232), (-47.6969644165039, -48.355105438232), (-47.66696441650391, -48.355105438232), (-47.63696441650391, -48.355105438232), (-47.60696441650391, -48.355105438232), (-47.576964416503905, -48.355105438232), (-47.546964416503904, -48.355105438232), (-47.5169644165039, -48.355105438232), (-47.48696441650391, -48.355105438232), (-47.45696441650391, -48.355105438232), (-47.42696441650391, -48.355105438232), (-47.396964416503906, -48.355105438232), (-47.366964416503905, -48.355105438232), (-47.3369644165039, -48.355105438232), (-47.30696441650391, -48.355105438232), (-47.27696441650391, -48.355105438232), (-47.24696441650391, -48.355105438232), (-47.216964416503906, -48.355105438232), (-47.186964416503905, -48.355105438232), (-47.156964416503904, -48.355105438232), (-47.12696441650391, -48.355105438232), (-47.09696441650391, -48.355105438232), (-47.06696441650391, -48.355105438232), (-47.036964416503906, -48.355105438232), (-47.006964416503905, -48.355105438232), (-46.976964416503904, -48.355105438232), (-46.9469644165039, -48.355105438232), (-46.91696441650391, -48.355105438232), (-46.88696441650391, -48.355105438232), (-46.85696441650391, -48.355105438232), (-46.826964416503905, -48.355105438232), (-46.796964416503904, -48.355105438232), (-46.7669644165039, -48.355105438232), (-46.73696441650391, -48.355105438232), (-46.70696441650391, -48.355105438232), (-46.67696441650391, -48.355105438232), (-46.646964416503906, -48.355105438232), (-46.616964416503905, -48.355105438232), (-46.5869644165039, -48.355105438232), (-46.55696441650391, -48.355105438232), (-46.52696441650391, -48.355105438232), (-46.49696441650391, -48.355105438232), (-46.466964416503906, -48.355105438232), (-46.436964416503905, -48.355105438232), (-46.406964416503904, -48.355105438232), (-46.37696441650391, -48.355105438232), (-46.34696441650391, -48.355105438232), (-46.31696441650391, -48.355105438232), (-46.286964416503906, -48.355105438232), (-46.256964416503905, -48.355105438232), (-46.226964416503904, -48.355105438232), (-46.1969644165039, -48.355105438232), (-46.16696441650391, -48.355105438232), (-46.13696441650391, -48.355105438232), (-46.10696441650391, -48.355105438232), (-46.076964416503905, -48.355105438232), (-46.046964416503904, -48.355105438232), (-46.01696441650391, -48.355105438232), (-45.98696441650391, -48.355105438232), (-45.95696441650391, -48.355105438232), (-45.92696441650391, -48.355105438232), (-45.896964416503906, -48.355105438232), (-45.866964416503905, -48.355105438232), (-45.8369644165039, -48.355105438232), (-45.80696441650391, -48.355105438232), (-45.77696441650391, -48.355105438232), (-45.74696441650391, -48.355105438232), (-45.716964416503906, -48.355105438232), (-45.686964416503905, -48.355105438232), (-45.656964416503904, -48.355105438232), (-45.62696441650391, -48.355105438232), (-45.59696441650391, -48.355105438232), (-45.56696441650391, -48.355105438232), (-45.536964416503906, -48.355105438232), (-45.506964416503905, -48.355105438232), (-45.476964416503904, -48.355105438232), (-45.4469644165039, -48.355105438232), (-45.41696441650391, -48.355105438232), (-45.38696441650391, -48.355105438232), (-45.35696441650391, -48.355105438232), (-45.326964416503905, -48.355105438232), (-45.296964416503904, -48.355105438232), (-45.26696441650391, -48.355105438232), (-45.23696441650391, -48.355105438232), (-45.20696441650391, -48.355105438232), (-45.17696441650391, -48.355105438232), (-45.146964416503906, -48.355105438232), (-45.116964416503905, -48.355105438232), (-45.0869644165039, -48.355105438232), (-45.05696441650391, -48.355105438232), (-45.02696441650391, -48.355105438232), (-44.99696441650391, -48.355105438232), (-44.966964416503906, -48.355105438232), (-44.936964416503905, -48.355105438232), (-44.906964416503904, -48.355105438232), (-44.87696441650391, -48.355105438232), (-44.84696441650391, -48.355105438232), (-44.81696441650391, -48.355105438232), (-44.786964416503906, -48.355105438232), (-44.756964416503905, -48.355105438232), (-44.726964416503904, -48.355105438232), (-44.6969644165039, -48.355105438232), (-44.66696441650391, -48.355105438232), (-44.63696441650391, -48.355105438232), (-44.60696441650391, -48.355105438232), (-44.576964416503905, -48.355105438232), (-44.546964416503904, -48.355105438232), (-44.51696441650391, -48.355105438232), (-44.48696441650391, -48.355105438232), (-44.45696441650391, -48.355105438232), (-44.42696441650391, -48.355105438232), (-44.396964416503906, -48.355105438232), (-44.366964416503905, -48.355105438232), (-44.3369644165039, -48.355105438232), (-44.30696441650391, -48.355105438232), (-44.27696441650391, -48.355105438232), (-44.24696441650391, -48.355105438232), (-44.216964416503906, -48.355105438232), (-44.186964416503905, -48.355105438232), (-44.156964416503904, -48.355105438232), (-44.12696441650391, -48.355105438232), (-44.09696441650391, -48.355105438232), (-44.06696441650391, -48.355105438232), (-44.036964416503906, -48.355105438232), (-44.006964416503905, -48.355105438232), (-43.976964416503904, -48.355105438232), (-43.9469644165039, -48.355105438232), (-43.91696441650391, -48.355105438232), (-43.88696441650391, -48.355105438232), (-43.85696441650391, -48.355105438232), (-43.826964416503905, -48.355105438232), (-43.796964416503904, -48.355105438232), (-43.76696441650391, -48.355105438232), (-43.73696441650391, -48.355105438232), (-43.70696441650391, -48.355105438232), (-43.67696441650391, -48.355105438232), (-43.646964416503906, -48.355105438232), (-43.616964416503905, -48.325105438232), (-43.5869644165039, -48.325105438232), (-43.55696441650391, -48.325105438232), (-43.52696441650391, -48.325105438232), (-43.49696441650391, -48.325105438232), (-43.466964416503906, -48.325105438232), (-43.436964416503905, -48.325105438232), (-43.406964416503904, -48.325105438232), (-43.37696441650391, -48.325105438232), (-43.34696441650391, -48.325105438232), (-43.31696441650391, -48.295105438232), (-43.286964416503906, -48.295105438232), (-43.256964416503905, -48.265105438232005), (-43.226964416503904, -48.235105438232004), (-43.1969644165039, -48.205105438232), (-43.16696441650391, -48.175105438232), (-43.13696441650391, -48.145105438232), (-43.10696441650391, -48.115105438232), (-43.076964416503905, -48.085105438232006), (-43.046964416503904, -48.055105438232005), (-43.01696441650391, -48.025105438232), (-42.98696441650391, -47.995105438232), (-42.95696441650391, -47.965105438232), (-42.92696441650391, -47.935105438232), (-42.896964416503906, -47.905105438232), (-42.866964416503905, -47.875105438232005), (-42.8369644165039, -47.845105438232004), (-42.80696441650391, -47.815105438232), (-42.77696441650391, -47.785105438232), (-42.74696441650391, -47.755105438232), (-42.716964416503906, -47.725105438232006), (-42.686964416503905, -47.695105438232005), (-42.656964416503904, -47.665105438232004), (-42.62696441650391, -47.635105438232), (-42.59696441650391, -47.605105438232), (-42.56696441650391, -47.575105438232), (-42.536964416503906, -47.545105438232), (-42.506964416503905, -47.515105438232005), (-42.476964416503904, -47.485105438232004), (-42.4469644165039, -47.455105438232), (-42.41696441650391, -47.425105438232), (-42.38696441650391, -47.395105438232), (-42.35696441650391, -47.365105438232)]
        # self.test_path = [(-50.0, -50.0), (-49.5, -50.0), (-49.0, -50.0), (-49.0, -49.5), (-49.0, -49.0)]
        self.test_path = [(-50.0, -50.03), (-49.97, -50.0), (-49.94, -49.97), (-49.91, -49.94), (-49.88, -49.91), (-49.85, -49.88), (-49.82, -49.85), (-49.79, -49.82), (-49.76, -49.79), (-49.73, -49.76), (-49.7, -49.73), (-49.67, -49.7), (-49.64, -49.67), (-49.61, -49.64), (-49.58, -49.61), (-49.55, -49.58), (-49.52, -49.55), (-49.52, -49.52), (-49.49, -49.49), (-49.46, -49.46), (-49.43, -49.43), (-49.4, -49.4), (-49.37, -49.37), (-49.34, -49.34), (-49.31, -49.31), (-49.28, -49.28), (-49.25, -49.25), (-49.22, -49.22), (-49.19, -49.19), (-49.16, -49.16), (-49.13, -49.13), (-49.1, -49.1), (-49.07, -49.07), (-49.04, -49.04), (-49.01, -49.01), (-48.98, -48.98), (-48.95, -48.95), (-48.92, -48.92), (-48.89, -48.89), (-48.86, -48.86), (-48.83, -48.83), (-48.8, -48.8), (-48.77, -48.77), (-48.74, -48.74), (-48.71, -48.71), (-48.71, -48.68), (-48.68, -48.65), (-48.65, -48.62), (-48.62, -48.59), (-48.59, -48.56), (-48.56, -48.53), (-48.53, -48.5), (-48.5, -48.47), (-48.47, -48.44), (-48.44, -48.41), (-48.41, -48.38), (-48.38, -48.35), (-48.35, -48.35), (-48.32, -48.35), (-48.29, -48.35), (-48.26, -48.35), (-48.23, -48.35), (-48.2, -48.35), (-48.17, -48.35), (-48.14, -48.35), (-48.11, -48.35), (-48.08, -48.35), (-48.05, -48.35), (-48.02, -48.35), (-47.99, -48.35), (-47.96, -48.35), (-47.93, -48.35), (-47.9, -48.35), (-47.87, -48.35), (-47.84, -48.35), (-47.81, -48.35), (-47.78, -48.35), (-47.75, -48.35), (-47.72, -48.35), (-47.69, -48.35), (-47.66, -48.35), (-47.63, -48.35), (-47.6, -48.32), (-47.57, -48.32), (-47.54, -48.32), (-47.51, -48.32), (-47.48, -48.32), (-47.45, -48.32), (-47.42, -48.32), (-47.39, -48.32), (-47.36, -48.32), (-47.33, -48.32), (-47.3, -48.32), (-47.27, -48.32), (-47.24, -48.32), (-47.21, -48.32), (-47.18, -48.32), (-47.15, -48.32), (-47.12, -48.32), (-47.09, -48.32), (-47.06, -48.32), (-47.03, -48.32), (-47.0, -48.32), (-46.97, -48.32), (-46.94, -48.32), (-46.91, -48.32), (-46.88, -48.32), (-46.85, -48.32), (-46.82, -48.32), (-46.79, -48.32), (-46.76, -48.32), (-46.73, -48.32), (-46.7, -48.32), (-46.67, -48.32), (-46.64, -48.32), (-46.61, -48.32), (-46.58, -48.32), (-46.55, -48.32), (-46.52, -48.32), (-46.49, -48.32), (-46.46, -48.32), (-46.43, -48.35), (-46.4, -48.35), (-46.37, -48.35), (-46.34, -48.35), (-46.31, -48.35), (-46.28, -48.35), (-46.25, -48.35), (-46.22, -48.35), (-46.19, -48.35), (-46.16, -48.35), (-46.13, -48.35), (-46.1, -48.35), (-46.07, -48.35), (-46.04, -48.35), (-46.01, -48.35), (-45.980000000000004, -48.35), (-45.95, -48.35), (-45.92, -48.35), (-45.89, -48.35), (-45.86, -48.35), (-45.83, -48.35), (-45.8, -48.38), (-45.77, -48.38), (-45.74, -48.38), (-45.71, -48.38), (-45.68, -48.38), (-45.65, -48.38), (-45.62, -48.38), (-45.59, -48.38), (-45.56, -48.38), (-45.53, -48.38), (-45.5, -48.38), (-45.47, -48.38), (-45.44, -48.38), (-45.41, -48.38), (-45.38, -48.38), (-45.35, -48.38), (-45.32, -48.38), (-45.29, -48.38), (-45.26, -48.38), (-45.230000000000004, -48.38), (-45.2, -48.38), (-45.17, -48.38), (-45.14, -48.38), (-45.11, -48.38), (-45.08, -48.38), (-45.05, -48.38), (-45.02, -48.38), (-44.99, -48.38), (-44.96, -48.38), (-44.93, -48.38), (-44.9, -48.38), (-44.87, -48.38), (-44.84, -48.38), (-44.81, -48.38), (-44.78, -48.38), (-44.75, -48.38), (-44.72, -48.38), (-44.69, -48.38), (-44.66, -48.38), (-44.63, -48.38), (-44.6, -48.38), (-44.57, -48.38), (-44.54, -48.38), (-44.51, -48.38), (-44.48, -48.38), (-44.45, -48.38), (-44.42, -48.38), (-44.39, -48.38), (-44.36, -48.38), (-44.33, -48.38), (-44.3, -48.38), (-44.27, -48.38), (-44.24, -48.38), (-44.21, -48.38), (-44.18, -48.38), (-44.15, -48.38), (-44.12, -48.38), (-44.09, -48.38), (-44.06, -48.38), (-44.03, -48.38), (-44.0, -48.38), (-43.97, -48.38), (-43.94, -48.38), (-43.91, -48.38), (-43.88, -48.38), (-43.85, -48.38), (-43.82, -48.38), (-43.79, -48.38), (-43.76, -48.38), (-43.730000000000004, -48.38), (-43.7, -48.38), (-43.67, -48.38), (-43.64, -48.38), (-43.61, -48.38), (-43.58, -48.38), (-43.55, -48.38), (-43.52, -48.35), (-43.49, -48.35), (-43.46, -48.35), (-43.43, -48.35), (-43.4, -48.32), (-43.37, -48.32), (-43.34, -48.32), (-43.31, -48.32), (-43.28, -48.29), (-43.25, -48.26), (-43.22, -48.23), (-43.19, -48.2), (-43.16, -48.17), (-43.13, -48.14), (-43.1, -48.11), (-43.07, -48.08), (-43.04, -48.05), (-43.01, -48.02), (-42.980000000000004, -47.99), (-42.95, -47.96), (-42.92, -47.93), (-42.89, -47.9), (-42.86, -47.87), (-42.83, -47.84), (-42.8, -47.81), (-42.77, -47.78), (-42.74, -47.75), (-42.71, -47.72), (-42.68, -47.69), (-42.65, -47.66), (-42.62, -47.63), (-42.59, -47.6), (-42.56, -47.57), (-42.53, -47.54), (-42.5, -47.51), (-42.47, -47.48), (-42.44, -47.45), (-42.41, -47.42), (-42.38, -47.39), (-42.35, -47.36), (-42.32, -47.33), (-42.32, -47.3)]
        self.current_goal_idx = 0

        # 목표 지점 설정
        self.goal = Point()
        self.set_new_goal()

    def scan_callback(self, msg):
        """ LaserScan 데이터를 받아 현재 위치와 heading 업데이트 """
        self.pose_x = msg.range_min  # 예제 코드 (실제 데이터 적용 필요)
        self.pose_y = msg.scan_time  # 예제 코드 (실제 데이터 적용 필요)

        # heading 값 계산 (예제, 실제 데이터에서 계산 필요)
        self.heading = (msg.time_increment + 360) % 360
        # print(f"현재 위치: ({round(self.pose_x, 3)}, {round(self.pose_y, 3)})")
        # print(f"현재 heading: {round(self.heading, 2)}°")

    def set_new_goal(self):
        """ 현재 목표를 리스트에서 설정 """
        if self.current_goal_idx < len(self.test_path):
            self.goal.x, self.goal.y = self.test_path[self.current_goal_idx]
        else:
            self.turtlebot_stop()
            self.get_logger().info("finish =========")
            # rclpy.shutdown()

    def move_to_destination(self):
        vel_msg = Twist()
        print(f"현재 위치: ({round(self.pose_x, 3)}, {round(self.pose_y, 3)})")
        print(f'목표 위치: ({round(self.goal.x, 3)}, {round(self.goal.y, 3)})')
        # 현재 목표까지의 거리 계산
        distance = math.sqrt((self.goal.x - self.pose_x) ** 2 + (self.goal.y - self.pose_y) ** 2)

        # 목표 지점 도착 여부 확인
        if distance < 0.2:
            # self.get_logger().info(f"목표 지점 {self.current_goal_idx} 도착. 잠시 정지합니다.")
            print(f"목표 지점 {self.current_goal_idx} 도착. 잠시 정지합니다.")
            # 목표 지점 도착 후 1초 정지
            self.turtlebot_stop()
            self.current_goal_idx += 1
            self.set_new_goal()
            return

        # 목표 heading 계산
        target_heading = math.degrees(math.atan2(-(self.goal.x - self.pose_x), self.goal.y - self.pose_y))
        target_heading = (target_heading + 360) % 360  # 0~360도로 변환

        # 현재 heading과 목표 heading 비교 (최단 회전 경로 고려)
        angle_diff = (target_heading - self.heading + 540) % 360 - 180

        # 🔹 heading이 목표와 5도 이상 차이나면 회전
        if abs(angle_diff) > 5:
            kp_angular = 0.02  # 회전 속도 조절 계수 (값을 더 키워도 됨)
            max_angular_speed = 1.0  # 최대 회전 속도 제한

            # 회전 속도를 angle_diff에 비례하도록 조정 (단, 최대 속도 제한)
            vel_msg.angular.z = -max(min(kp_angular * angle_diff, max_angular_speed), -max_angular_speed)
            vel_msg.linear.x = 0.0  # 회전 중 직진 금지
            # print(f'현재 heading: {self.heading}')
            # print(f'현재 각속도: {vel_msg.angular.z}')

        else:
            # 🔹 heading 차이가 5도 이하라면 직진
            kp_linear = 1  # 이동 속도 조절 계수
            vel_msg.linear.x = min(kp_linear * distance, 0.7)  # 최대 속도 0.5
            vel_msg.angular.z = 0.0  # 직진 시 회전 없음

        # 디버깅 출력

        self.pub.publish(vel_msg)

    def turtlebot_stop(self):
        # self.get_logger().info("Turtlebot stopping")
        self.cmd_msg.linear.x = 0.0
        self.cmd_msg.angular.z = 0.0


def main(args=None):
    rclpy.init(args=args)
    controller = Controller()
    rclpy.spin(controller)
    controller.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()